{
  "$schema": "schemas/subject.json",
  "title": "Aplikacje Baz Danych",
  "id": "apbd",
  "data": [
    {
      "question": "CLR:",
      "id": 2981,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "Potrafi uruchomić kod napisany w MSIL",
          "correct": false
        },
        {
          "answer": "Potrafi uruchomić kod napisany w IL",
          "correct": false
        },
        {
          "answer": "Jest częścią platformy .NET",
          "correct": true
        },
        {
          "answer": "Potrafi uruchomić kod napisany w języku maszynowym",
          "correct": true
        }
      ],
      "comments": []
    },
    {
      "question": "W poniższym fragmencie kodu:<p></p>\n<p>&nbsp;</p>\n<p>public void DatabaseOperation() {</p>\n<p>var sqlConnection = new SqlConnection(ConfigurationManager.ConnectionStrings[\"Default\"])//reszta kodu&nbsp;</p>\n<p>var sqlCommand = new sqlCommand(\"SELECT * FROM EMP\");</p>\n<p>sqlConnection.open();</p>\n<p>&nbsp;</p>\n<p>//...operacje bazodanowe</p>\n<p>&nbsp;</p>\n<p>sqlCommand.Dispose();</p>\n<p>sqlConnection.Dispose();</p>\n<p>}\n          </p>",
      "id": 2982,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "Można by zastosować klauzulę \"try-catch-finally\" w celu bezpiecznego zwolnienia zasobów związanych z połączeniem z bazą danych",
          "correct": true
        },
        {
          "answer": "<p>ConfigurationManager pobiera ConnectionString z relacyjnej bazy danych</p>",
          "correct": false
        },
        {
          "answer": "Można by zastosować klauzulę \"using\" w celu bezpiecznego zwolnienia zasobów związanych z z połączeniem z bazą danych",
          "correct": true
        },
        {
          "answer": "Zaprezentowany jest bezpieczny sposób zwalniania zasobów związanych z połączeniem do bazy danych",
          "correct": false
        }
      ],
      "comments": []
    },
    {
      "question": "Różnica impedancji",
      "id": 2984,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "To obciążenie systemowe związane z wykonywaniem kodu SQL i próba pominięcia go lub zastąpienia w operacjach bazodanowych",
          "correct": false
        },
        {
          "answer": "To dysonans między \"światem obiektowym\" a \"światem relacyjnym\"",
          "correct": true
        },
        {
          "answer": "To obciążenie systemowe powstające, gdy wykonany zostaje kod SQL zaszyty w kodzie napisanym w języku obiektowym",
          "correct": false
        }
      ],
      "comments": []
    },
    {
      "question": "TRADYCYJNE technologie webowe/klienckie to:",
      "id": 2985,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "Visual Basic",
          "correct": true
        },
        {
          "answer": "C#",
          "correct": true
        },
        {
          "answer": "Java",
          "correct": true
        },
        {
          "answer": "HTML5, JavaScript",
          "correct": false
        }
      ],
      "comments": []
    },
    {
      "question": "LINQ",
      "id": 2986,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "pozwala pominąć język SQL w operacjach bazodanowych",
          "correct": true
        },
        {
          "answer": "dzięki uniknięciu SQL pozwala na szybsze wykonywanie operacji bazodanowych w aplikacji",
          "correct": false
        },
        {
          "answer": "jego składnia w niczym nie przypomina SQL",
          "correct": false
        }
      ],
      "comments": []
    },
    {
      "question": "Które z poniższych zdań na temat LINQ jest prawdziwe?",
      "id": 2987,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "Jest to część framework'u .NET. Technologia ta umożliwia realizowanie zapytań na kolekcjach obiektów. Składnia LINQ przypomina nieco SQL.&nbsp; LINQ może działać na dowolnej kolekcji, która implementuje interfejs IEnumerable.",
          "correct": false
        },
        {
          "answer": "Jest to część framework'u .NET. Technologia ta umożliwia bezpośrednią komunikację z relacyjną bazą danych z pominięciem języka SQL. Zapytanie jest wysyłane do bazy danych w zupełnie innej postaci (protokół 2PC).",
          "correct": false
        },
        {
          "answer": "Jest to część framework'u .NET. Technologia ta umożliwia realizowanie zapytań na obiektach. Składnia LINQ przypomina nieco SQL. Technologia ta służy wyłącznie do działania na plikach XML.",
          "correct": false
        },
        {
          "answer": "Jest to część framework'u .NET. Technologia ta umożliwia realizowanie znacznie bardziej wydajnych zapytań SQL na bazie danych. Wzrost wydajności wynosi ok. 10-20%.",
          "correct": false
        }
      ],
      "comments": []
    },
    {
      "question": "Zaznacz zalety EF",
      "id": 2988,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "EF pozwala nam na częściowe poradzenie sobie z problemem opisywanym poprzez termin \"rożnica impedancji\"",
          "correct": false
        },
        {
          "answer": "EF pozwala nam zapisywać historię zmian w strukturze bazy danych za pomocąmechanizmu migracji (podejście CodeFirst)",
          "correct": false
        },
        {
          "answer": "Wykorzystanie EF pozwala nam na uniezależnienie się od konkretnej bazy danych (np. Oracle, MS SQL Server). Dzieki temu możemy znacznie łatwiej zmienić bazę danych , jeśli zajdzie taka potrzeba.",
          "correct": false
        },
        {
          "answer": "Przyspieszenie procesu wytwarzania oprogramowania. Możemy skupić się wyłącznie na pisaniu kodu aplikacji (nie martwiąc się o kod SQL).",
          "correct": false
        }
      ],
      "comments": []
    },
    {
      "question": "W których językach możemy stworzyć podstawowy kod Code Behind w aplikacji ASP.NET?",
      "id": 2989,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "Visual Basic",
          "correct": false
        },
        {
          "answer": "JavaScript",
          "correct": false
        },
        {
          "answer": "C#",
          "correct": false
        },
        {
          "answer": "HTML",
          "correct": false
        }
      ],
      "comments": []
    },
    {
      "question": "Kiedy warto korzystać z podejścia Database First w EF?",
      "id": 2990,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "Zmiany w strukturze bazy danych wykonywane są z poziomu języka SQL (np. poprzez Sql Managment Studio) przez administratora bazy danych",
          "correct": false
        },
        {
          "answer": "Nie mamy potrzeby modyfikacji struktury bazy danych (np. tabel, indeksów) z poziomu języka C#",
          "correct": false
        },
        {
          "answer": "Chcemy korzystać głównie ze skomplikowanych procedur składowych",
          "correct": false
        },
        {
          "answer": "Chcemy wersjonować zmiany w strukturze bazy danych. innymi słowy chcemy mieć pełną historię zmiany jakie zachodziły w naszej bazie danych (np. dodanie tabeli, kolumny w tabeli itp.). Taka historia pozwoli nam szybko wycofać zmiany, które np. okazały się problematyczne i spowodowały błąd.",
          "correct": false
        }
      ],
      "comments": []
    },
    {
      "question": "ASP.NET MVC oparty jest na wzorcu projektowym MVC. Wzorzec ten składa się z trzech części . Litera \"M\" oznacza model. Które z poniższych twierdzeń poprawnie opisują model?",
      "id": 2991,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "Klasy modelowe mogą być opisane przez dodatkowe metadane, któe służą określeniu np. reguł walidacyjnych związanych z danym modelem. Np. dane pole jest wymagane lub jego długość nie może przekroczyć 30 znaków.",
          "correct": false
        },
        {
          "answer": "Model w aplikacji ASP.NET MVC reprezentują zazwyczaj proste klasy C# mapujące tabele z relacyjnej bazy danych. Klasy te często noszą miano \"POCO\" (Plain Old C# Objects).",
          "correct": false
        },
        {
          "answer": "Klasy modelowe odpowiadają za obsługe żądania HTTP. Zaleznie od rodzaju żądania pobierają, aktualizują, usuwają lub wyświetlają dane.",
          "correct": false
        },
        {
          "answer": "Klasy modelowe odpowiadają za odpowiednie przekierowanie żądania użytkownika do danego kontrolera i metody.",
          "correct": false
        }
      ],
      "comments": []
    },
    {
      "question": "ASP.NET MVC oparty jest na wzorcu projektowym MVC. Wzorzec ten składa się z trzech części. \"V\" oznacza widok. Które z poniższych twierdzeń poprawnie opisują widok?",
      "id": 2992,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "Widok jest odpowiedzialny za prezentację rezultatu żądania HTTP GET. nie powinien jednak zmieniać formatu&nbsp; wyświetlanych danych. Format danych (np. format daty) powinien byc określony wyłąćznie w kontrolerze.",
          "correct": false
        },
        {
          "answer": "Widok odpowiada za obsługę żądania HTTP danego użytkownika (np. GET lub POST).",
          "correct": false
        },
        {
          "answer": "Widok odpowiada za bezpośrednią komunikację z bazą danych i zapisywanie w niej wszelkich zmian zachodzących w modelu.",
          "correct": false
        },
        {
          "answer": "Widok może odpowiadać za odpowiednie formatowanie wyniku żądania HTTP GET i jego wyświetlenie. Inny przykład to wyświetlenie daty w różny sposób w zależności od ustawień języka przeglądarki. Pozwala to na internacjonalizowanie naszej aplikalcji.",
          "correct": false
        }
      ],
      "comments": []
    },
    {
      "question": "MVC",
      "id": 3364,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "jest wzorcem projektowym",
          "correct": true
        },
        {
          "answer": "jest to tylko i wyłącznie część nazwy projektu .NET",
          "correct": false
        },
        {
          "answer": "jego rozwinięcie to: More Visible Code",
          "correct": false
        },
        {
          "answer": "żadne z podanych",
          "correct": false
        }
      ],
      "comments": []
    },
    {
      "question": "Przeanalizuj poniższy kod aplikacji WindowForm:<p></p>\n<pre>private void OkButton_Click(object sender, EventArgs e) f\n{\n    var sql = \"SELECT * FROM Person WHERE Login='\" + LoginTextBox.Text + \"' AND Password,'\" + PasswordTextBox.Text + \"I;\";\n    var sq1Connection=new Sq1Connection(ConfigurationManager.ConnectionStrings[\"DefaultCon\"].( // urwało dalej\n    var sq1Command=new Sq1Command(sql); \n    \n    var dr = sq1Command.ExecuteReader();\n    //... checking the result etc.\n    \n    sq1Connection.Dispose();\n    sq1Command.Dispose(); \n}\n</pre>\n<p>Zaznacz, które z poniższych stwierdzeń są prawdziwe:\n          </p>",
      "id": 3365,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "Fragment kodu mógłby wykorzystywać blok using w celu implementacji w pełni bezpiecznego sposobu zwalniania zasobów (obiekt sqlConnection i sqlCommand).",
          "correct": false
        },
        {
          "answer": "Fragment kodu umożliwia przeprowadzenie ataku SqlInjection",
          "correct": false
        },
        {
          "answer": "Fragment kodu prezentuje w pełni bezpieczny sposób na zwalnianie zasobów. W tym wypadku zwalnianym zasobem jest m.in. połączenie do bazy danych",
          "correct": false
        },
        {
          "answer": "Klasa ConfigurationManager pozwala na pobranie ConnectionString'a z ustawień aplikacji",
          "correct": false
        }
      ],
      "comments": []
    },
    {
      "question": "W akronimie SOLID za co odpowiada litera \"D\"?",
      "id": 3366,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "Do not repeat yourself",
          "correct": false
        },
        {
          "answer": "Design by contract",
          "correct": false
        },
        {
          "answer": "Dependency inversion",
          "correct": true
        },
        {
          "answer": "Dependency injection",
          "correct": false
        }
      ],
      "comments": []
    },
    {
      "question": "Zaznacz poprawne zdanie/a na temat podejść w EntityFramework",
      "id": 3367,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "korzystając z podejścia DatabaseFirst istnieje możliwość późniejszej zmiany metody pracy z bazą danych na CodeFirst",
          "correct": false
        },
        {
          "answer": "istnieje możliwość wycofania migracji uruchomionej na bazie danych do określonej migracji wstecz",
          "correct": false
        },
        {
          "answer": "migracje w podejściu CodeFirst działają przyrostowo",
          "correct": false
        }
      ],
      "comments": []
    },
    {
      "question": "Zaznacz wady EF",
      "id": 3368,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "Język LINQ wykorzystywany w połączeniu z EF nie ma takiego samego poziomu ekspresji jak język SQL. Innymi słowy nie każde zapytanie zapisane w języku SQL potrafimy zapisać w języku LINQ.",
          "correct": false
        },
        {
          "answer": "EF potrafi współdziałać jedynie z bazą danych MS SQL Server. Jeśli chcemy wykorzystać inną bazę danych - musimy posłużyć się inną biblioteką ORM.",
          "correct": false
        },
        {
          "answer": "Zapytania wykorzystujące EF są zazwyczaj mniej wydajne niż te same zapytania zapisane za pomocą czystego SQL i bibliotek SqlConnection/SqlCommand (szczególnie te bardziej skomplikowane zapytania)",
          "correct": false
        },
        {
          "answer": "Podejście Code First nie zawsze prowadzi do wygenerowania schematu bazy danych zgodnej z 3NF",
          "correct": false
        }
      ],
      "comments": []
    },
    {
      "question": "Zaznacz zdania poniżej, które poprawnie opisują działania tokena JWT",
      "id": 3369,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "Zarówno token JWT, jak również refresh token przechowywane są w bazie danych",
          "correct": false
        },
        {
          "answer": "Token JWT jest domyślnie zaszyfrowany",
          "correct": false
        },
        {
          "answer": "Mając odpowiedni access token możemy z jego pomocą uzyskać dostęp do zaprojektowanej końcówki aplikacji typu API (zakładając, że token nie wygasł).",
          "correct": false
        },
        {
          "answer": "Token JWT może przechowywać informacje opisujące użytkownika",
          "correct": false
        }
      ],
      "comments": []
    },
    {
      "question": "Frameworki ORM",
      "id": 3370,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "ułatwiają parcę z bazami danych",
          "correct": false
        },
        {
          "answer": "wymagają od programisty znajomości SQLa",
          "correct": false
        },
        {
          "answer": "EntityFramework jest jedynym rozwiązaniem ORM dla .NETu",
          "correct": false
        },
        {
          "answer": "mogą powodować generowanie nieoptymalnego kodu SQL",
          "correct": false
        }
      ],
      "comments": []
    },
    {
      "question": "Co oznacza termin \"problem N+1\" związany z ORM'ami?",
      "id": 3371,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "Termin związany jest z błędem w ORM'ach, który uniemożliwia budowanie pewnych rodzajów relacji między tabelami z poziomu kodu (podejście Code-First)",
          "correct": false
        },
        {
          "answer": "Sytuacja nieptymalnego wykorzystanie trybu \"lazy loading\". ORM wykonuje nadmiarową liczbę zapytań ze względu na \"dociąganie\" brakujących danych w locie (np. podczas wykonywania instrukcji pętli).",
          "correct": false
        },
        {
          "answer": "Termin związany jest z błędem występujących w ORM'ach w trakcie zmiany sterownika do bazy danych i generowania nieptymalnego kodu SQl (jest to następstwo zmiany sterownika bazy danych bez zmiany konfiguracji context'u).",
          "correct": false
        },
        {
          "answer": "Taki termin nie istnieje",
          "correct": false
        }
      ],
      "comments": []
    },
    {
      "question": "Zaznacz <strong>zalety</strong> EF",
      "id": 3372,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "EF pozwala nam na częściowe poradzenie sobie z problemem opisywanym poprzez termin \"różnica impedancji\".",
          "correct": false
        },
        {
          "answer": "Wykorzystanie EF pozwala nam na uniezależnienie się od konkretnej bazy danych (np. Oracle, MS SQL Server). Dzięki temu możemy znacznie łatwiej zmienić bazę danych, jeśli zajdzie taka potrzeba.",
          "correct": false
        },
        {
          "answer": "EF jest najszybszym i najbardziej optymalnym sposobem na komunikację z bazą danych",
          "correct": false
        },
        {
          "answer": "Przyspieszenie procesu wytwarzania oprogramowania. Możemy skupić się wyłącznie na pisaniu kodu aplikacji (nie martwiąc się<p></p>\n<p>o kod SQL).</p>",
          "correct": false
        }
      ],
      "comments": []
    },
    {
      "question": "Zaznacz poprawne zdanie/a na temat podejść w EntityFramework",
      "id": 3373,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "korzystając z podejścia DatabaseFirst istnieje możliwość późniejszej zmiany metody pracy z bazą danych na CodeFirst",
          "correct": false
        },
        {
          "answer": "istnieje możliwość wycofania migracji uruchomionej na bazie danych do określonej migracji wstecz",
          "correct": false
        },
        {
          "answer": "migracje w podejściu CodeFirst działają przyrostowo",
          "correct": false
        }
      ],
      "comments": []
    },
    {
      "question": "Wskazanie w C#, że zmienna typu prostego jego nullowalna odbywa się poprzez",
      "id": 3374,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "napisanie własnej metody rozszerzeń, która będzie realizować tę funkcjonalność",
          "correct": false
        },
        {
          "answer": "podanie \"?\" po typie zmiennej",
          "correct": true
        },
        {
          "answer": "typy proste domyślnie pozwalają na przyjmowanie wartości null",
          "correct": false
        },
        {
          "answer": "podanie \"(null)\" po typie zmiennej",
          "correct": false
        }
      ],
      "comments": []
    },
    {
      "question": "Token JWT",
      "id": 3375,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "jest jedynym rodzajem tokena, o który może opierać się uwierzytelnianie w projekcie .NET",
          "correct": false
        },
        {
          "answer": "może zostać wydany na czas nieokreślony",
          "correct": false
        },
        {
          "answer": "składa się z trzech części: nagłówka, zawartości i części do weryfikowania podpisu",
          "correct": false
        }
      ],
      "comments": []
    },
    {
      "question": "Wady EF: EF i język LINQ nie zawsze radzą sobie z generowaniem skomplikowanych zapytań SQL (np. wykorzystujących wiele podzapytań).",
      "id": 3376,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "Język LINQ wykorzystywany w połączeniu z EF nie ma takiego samego poziomu ekspresji jak język SQL. Innymi słowy nie każde zapytanie zapisane w języku SQL potrafimy zapisać w języku LINQ.",
          "correct": false
        },
        {
          "answer": "Zapytania wykorzystujące EF są zazwyczaj mniej wydajne niż te same zapytania zapisane za pomocą czystego SQL i bibliotek SqlConnection/SqlCommand (szczególnie te bardziej skomplikowane zapytania)",
          "correct": false
        },
        {
          "answer": "EF nie zawsze pozwala nam skorzystać ze wszystkich funkcjonalności wykorzystywanej bazy danych (np. nietypowe typy danych występujące tylko w danej bazie danych).",
          "correct": false
        }
      ],
      "comments": []
    },
    {
      "question": "Wybierz, który z poniższych adresów URL jest zgodny z metodyką REST pod kątem jego formatu",
      "id": 3377,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "https://localhost:8080/pets/calcualteAge",
          "correct": false
        },
        {
          "answer": "https://localhost:8080/customer/1/getData",
          "correct": false
        },
        {
          "answer": "https://localhost:8080/artists",
          "correct": true
        },
        {
          "answer": "https//localhost:8080/clients?method=delete",
          "correct": false
        }
      ],
      "comments": []
    },
    {
      "question": "Które z poniższych fragmentów kodu <strong>nie zwróci błędu</strong> w sytuacji kiedy nie odnaleźliśmy żadnego elementu?",
      "id": 3378,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "_context.Students.First(x =&gt; x.ID == 1);",
          "correct": false
        },
        {
          "answer": "_context.Students.SingleOrDefault(x =&gt; x.ID == 1);",
          "correct": true
        },
        {
          "answer": "_context.Students.Where(x =&gt; x.ID == 1);",
          "correct": true
        },
        {
          "answer": "_context.Students.FirstOrDefault(x =&gt; x.ID == 1);",
          "correct": true
        }
      ],
      "comments": []
    },
    {
      "question": "Kiedy warto korzystać z podejścia Code First w EF?",
      "id": 3379,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "Chcemy mieć możliwość generowania i modyfikowania struktury bazy danych z poziomu języka C# (np. dodania tabeli, zmiany typu danych kolumny itp.)",
          "correct": false
        },
        {
          "answer": "Zmiany w strukturze bazy danych wykonywane są poprzez język SQL (np. z poziomu Sql Management Studio) przez administratora bazy danych",
          "correct": false
        },
        {
          "answer": "Dzięki temu możemy np. łatwo wycofać zmiany w bazie danych w przypadku błędu.",
          "correct": false
        },
        {
          "answer": "Chcemy wersjonować wszystkie zmiany w strukturze naszej bazy danych. Innymi słowy chcemy zachowywać pełną historię zmian zachodzących w strukturze naszej bazy danych.",
          "correct": false
        }
      ],
      "comments": []
    },
    {
      "question": "Klasa startup projektu web api:",
      "id": 3380,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "zawiera metody służące do budowania zależności w projekcie",
          "correct": false
        },
        {
          "answer": "jest klasą rozruchową - posiada metode main",
          "correct": false
        },
        {
          "answer": "jest niezbędna do zbudowania projektu w przypadk udomyślnej konfiguracji",
          "correct": false
        }
      ],
      "comments": []
    },
    {
      "question": "EntityFramework:",
      "id": 3381,
      "numberOfComments": 0,
      "answers": [
        {
          "answer": "służy do pracy tylko z bazami SQL Server",
          "correct": false
        },
        {
          "answer": "wymaga dodatkowego sterownika bazodanowego",
          "correct": false
        },
        {
          "answer": "nie pozwala na pisanie instrukcji SQL",
          "correct": false
        },
        {
          "answer": "komunikuje się z bazą danych poprzez kontekst bazodanowy",
          "correct": false
        }
      ],
      "comments": []
    }
  ],
  "updatedAt": 1705528642695
}